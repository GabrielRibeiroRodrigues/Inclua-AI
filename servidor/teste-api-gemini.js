// TESTE R√ÅPIDO DA API GEMINI
// Execute: node teste-api-gemini.js

const { GoogleGenerativeAI } = require('@google/generative-ai');
const dotenv = require('dotenv');

// Carregar vari√°veis de ambiente
dotenv.config();

async function testarAPIGemini() {
    console.log('üß™ TESTE DA API GEMINI');
    console.log('='.repeat(50));
    
    // 1. Verificar se a API key existe
    console.log('1Ô∏è‚É£ Verificando API Key...');
    if (!process.env.GEMINI_API_KEY) {
        console.log('‚ùå GEMINI_API_KEY n√£o encontrada!');
        return;
    }
    console.log('‚úÖ API Key encontrada:', process.env.GEMINI_API_KEY.substring(0, 10) + '...');
    
    // 2. Inicializar cliente
    console.log('\n2Ô∏è‚É£ Inicializando cliente Gemini...');
    try {
        const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
        const model = genAI.getGenerativeModel({ 
            model: 'gemini-1.5-flash',
            generationConfig: {
                temperature: 0.7,
                topP: 0.95,
                maxOutputTokens: 100,
            },
        });
        console.log('‚úÖ Cliente inicializado com sucesso');
        
        // 3. Teste simples de texto
        console.log('\n3Ô∏è‚É£ Testando gera√ß√£o de texto...');
        const prompt = 'Responda apenas "Teste bem-sucedido" se voc√™ conseguir me ouvir.';
        
        const startTime = Date.now();
        const result = await model.generateContent(prompt);
        const response = await result.response;
        const text = response.text();
        const duration = Date.now() - startTime;
        
        console.log('‚úÖ Resposta recebida em', duration + 'ms');
        console.log('üìù Resposta:', text);
        
        // 4. Verificar se a resposta faz sentido
        if (text.toLowerCase().includes('teste') || text.toLowerCase().includes('sucesso')) {
            console.log('‚úÖ API funcionando perfeitamente!');
        } else {
            console.log('‚ö†Ô∏è API respondeu, mas resposta inesperada');
        }
        
    } catch (error) {
        console.log('‚ùå Erro ao testar API:', error.message);
        
        // Diagn√≥stico espec√≠fico do erro
        if (error.message.includes('API_KEY_INVALID')) {
            console.log('üí° Solu√ß√£o: Verifique se a API key est√° correta');
        } else if (error.message.includes('quota')) {
            console.log('üí° Solu√ß√£o: Limite de requisi√ß√µes atingido, aguarde');
        } else if (error.message.includes('network') || error.message.includes('fetch')) {
            console.log('üí° Solu√ß√£o: Verifique sua conex√£o com a internet');
        } else {
            console.log('üí° Erro desconhecido - verifique os logs do servidor');
        }
    }
    
    console.log('\n' + '='.repeat(50));
    console.log('üèÅ Teste finalizado');
}

// Executar teste
testarAPIGemini();
